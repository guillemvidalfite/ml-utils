
;; This is how the anomaly input fields variable should look
;;["MeasurementData.MeasurementParameter.StudID.value",
;;"WeldCurrentActualPositive",
;;"WeldTimeActual",
;;"WeldVoltageActual",
;;"WeldEnergyActual",
;;"PilotVoltageActual",
;;"LMLiftHeightActual",
;;"LMPenetrationActual",
;;"DropTimeActual",
;;"StickoutActual",
;;"MeasurementData.MeasurementParameter.WeldProcess.value",
;;"MeasurementData.MeasurementParameter.PilotCurrentActual.value",
;;"MeasurementData.MeasurementParameter.PilotTimeActual.value",
;;"MeasurementData.MeasurementParameter.WeldCurrentActualNegative.value",
;;"MeasurementData.MeasurementParameter.LMPositionActual.value",
;;"MeasurementData.MeasurementParameter.LiftFinishedMode.value",
;;"MeasurementData.MeasurementParameter.ProtectiveGasPreFlowActive.value",
;;"MeasurementData.MeasurementParameter.ProtectiveGasFlowDuringWeldprocessActive.value",
;;"MeasurementData.MeasurementParameter.ProtectiveGasPostFlowActive.value",
;;"Error"]

;; 1 click dataset
(define dataset-id
  (create-and-wait-dataset (bigml.fields.to-ids {"source" source-id
                                                 "all_fields" true}
                                                source-id)))

;; DATA CLEAN filter out when no weld
(define dataset-clean-id
  (create-and-wait-dataset (bigml.fields.to-ids {"origin_dataset"  dataset-id
                                                 "json_filter"
                                                 [">"
                                                  ["field" "WeldTimeActual"]
                                                  0]
                                                 "all_fields" true}
                                                dataset-id)))


;; train anomaly detector with error and studid fields as id fields and parameter input-field selection
;; uses seeds to make tests more stable 
(define anomaly-id
  (create-and-wait-anomaly {"dataset" dataset-clean-id
                            "id_fields" ["000009" "000129"]
                            "seed"
                            "2c249dda00fbf54ab4cdd850532a584f286af5b6"
                            "input_fields" anomaly-input-fields
                            "anomaly_seed"
                            "2c249dda00fbf54ab4cdd850532a584f286af5b6"}))

;; batch anomaly score over the original dataset
(define batchanomalyscore1
  (create-and-wait-batchanomalyscore {"anomaly" anomaly-id
                                      "dataset" dataset-clean-id
                                      "all_fields" true
                                      "score_name" "score_output"
                                      "output_dataset" true}))

;; batch anomaly score dataset
(define dataset-bas
  ((fetch batchanomalyscore1) ["output_dataset_resource"] false))


;; output dataset, filter fields
(define output-dataset
  (create-and-wait-dataset (bigml.fields.to-ids {"origin_dataset" dataset-bas
                                                 "all_fields" true
                                                 "input_fields"
                                                 ["extensionid"
                                                  "fingerprint"
                                                  "score"
                                                  "BodyShopRepair"
                                                  "AssemblyShopRepair"
                                                  "Error"
                                                  "score_output"]}
                                                dataset-bas)))
